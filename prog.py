import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import time

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Desintegraci√≥n Radiactiva - Fracci√≥n vs Periodos")

st.title("üìâ Desintegraci√≥n Radiactiva: Fracci√≥n remanente vs N√∫mero de Periodos")

# Entradas del usuario
num_periodos = st.slider("N√∫mero total de periodos (t / t¬Ω)", min_value=1, max_value=20, value=10)
dt = st.slider("Paso entre puntos (fracci√≥n de vida media)", min_value=0.05, max_value=1.0, value=0.2)

# Par√°metro constante
lambda_ln2 = np.log(2)  # ln(2)

# Inicializar listas para graficar
datos_n = []
datos_frac = []

# Contenedor para la gr√°fica
grafico = st.empty()

# Simulaci√≥n
n = 0.0
while n <= num_periodos:
    N_frac = np.exp(-lambda_ln2 * n)  # N(t)/N0 = e^(-ln(2) * n)
    datos_n.append(n)
    datos_frac.append(N_frac)

    # Graficar con escala fija
    fig, ax = plt.subplots()
    ax.plot(datos_n, datos_frac, color='green', marker='o', linestyle='-')
    ax.set_xlim(0, num_periodos)
    ax.set_ylim(0, 1.05)
    ax.set_xlabel("N√∫mero de periodos (t / t¬Ω)")
    ax.set_ylabel("Fracci√≥n remanente (N / N‚ÇÄ)")
    ax.set_title("Desintegraci√≥n Radioactiva Normalizada")

    grafico.pyplot(fig)

    n += dt
    time.sleep(0.3)

# Mostrar f√≥rmula final
st.latex(r"\frac{N(t)}{N_0} = e^{-\ln(2) \cdot \frac{t}{t_{1/2}}}")
st.markdown("Donde:")
st.markdown("- \( N_0 \) es el n√∫mero inicial de n√∫cleos")
st.markdown("- \( t_{1/2} \) es la vida media")
st.markdown("- \( n = t / t_{1/2} \) es el n√∫mero de periodos")

st.success("‚úÖ Simulaci√≥n completada.")
